
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftORleftANDleftEQNEleftLTGTLEGEleftPLUSMINUSleftTIMESDIVIDEMODULOrightUMINUSrightNOTnonassocLPARENRPARENAND BREAK COLON COMMA CONTINUE DEF DIVIDE DOT ELSE EQ EQUALS EXCEPT FALSE FOR GE GT IDENTIFIER IF IN LBRACKET LE LEN LPAREN LT MINUS MODULO NE NEWLINE NOT NUMBER OR PLUS PRINT RANGE RBRACKET RETURN RPAREN STRING TIMES TRUE TRY WHILEprogram : statementsstatements : statement\n                  | statements statementstatement : print_stmt\n                | assign_stmt\n                | if_stmt\n                | while_stmt\n                | for_stmt\n                | function_def\n                | return_stmt\n                | break_stmt\n                | continue_stmt\n                | try_except_stmt\n                | NEWLINEprint_stmt : PRINT LPAREN expr_list RPAREN\n                 | PRINT exprassign_stmt : IDENTIFIER EQUALS expr\n                  | IDENTIFIER LBRACKET expr RBRACKET EQUALS exprif_stmt : IF expr COLON statements\n               | IF expr COLON statements ELSE COLON statementswhile_stmt : WHILE expr COLON statementsfor_stmt : FOR IDENTIFIER IN expr COLON statementsfunction_def : DEF IDENTIFIER LPAREN param_list RPAREN COLON statementsparam_list : IDENTIFIER\n                 | param_list COMMA IDENTIFIER\n                 | emptyreturn_stmt : RETURN expr\n                  | RETURNbreak_stmt : BREAKcontinue_stmt : CONTINUEtry_except_stmt : TRY COLON statements EXCEPT COLON statementsexpr : term\n            | expr PLUS term\n            | expr MINUS term\n            | expr TIMES term\n            | expr DIVIDE term\n            | expr MODULO term\n            | expr GT term\n            | expr LT term\n            | expr GE term\n            | expr LE term\n            | expr EQ term\n            | expr NE term\n            | expr AND term\n            | expr OR termterm : factor\n            | NOT term\n            | MINUS term %prec UMINUSfactor : NUMBER\n              | STRING\n              | TRUE\n              | FALSE\n              | IDENTIFIER\n              | list_expr\n              | function_call\n              | string_method\n              | len_function\n              | range_call\n              | LPAREN expr RPARENlist_expr : LBRACKET expr_list RBRACKET\n                | IDENTIFIER LBRACKET expr RBRACKETexpr_list : expr\n                | expr_list COMMA expr\n                | emptyfunction_call : IDENTIFIER LPAREN expr_list RPAREN\n                    | IDENTIFIER LPAREN RPARENstring_method : IDENTIFIER DOT IDENTIFIER LPAREN expr_list RPAREN\n                    | IDENTIFIER DOT IDENTIFIER LPAREN RPARENlen_function : LEN LPAREN expr RPARENrange_call : RANGE LPAREN expr_list RPAREN\n                 | RANGE LPAREN RPARENexpression : IDENTIFIER LPAREN arg_list RPARENarg_list : expression\n                | arg_list COMMA expression\n                | emptyempty :'
    
_lr_action_items = {'NEWLINE':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,21,22,23,25,27,28,30,32,33,34,35,36,37,38,39,40,41,52,53,70,71,79,81,83,86,87,89,90,91,92,93,94,95,96,97,98,99,100,101,102,105,107,110,112,113,120,121,123,124,127,130,132,133,134,135,136,138,139,140,141,],[14,14,-2,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-28,-29,-30,-3,-16,-32,-46,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-27,14,-48,-47,-17,14,14,14,-15,-59,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-66,-60,-71,14,14,-61,-65,-69,-70,14,14,-68,-18,14,14,14,14,-67,14,14,]),'PRINT':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,21,22,23,25,27,28,30,32,33,34,35,36,37,38,39,40,41,52,53,70,71,79,81,83,86,87,89,90,91,92,93,94,95,96,97,98,99,100,101,102,105,107,110,112,113,120,121,123,124,127,130,132,133,134,135,136,138,139,140,141,],[15,15,-2,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-28,-29,-30,-3,-16,-32,-46,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-27,15,-48,-47,-17,15,15,15,-15,-59,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-66,-60,-71,15,15,-61,-65,-69,-70,15,15,-68,-18,15,15,15,15,-67,15,15,]),'IDENTIFIER':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,17,18,19,20,21,22,23,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,45,46,48,52,53,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,77,78,79,81,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,105,107,110,112,113,120,121,122,123,124,125,127,129,130,132,133,134,135,136,138,139,140,141,],[16,16,-2,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,36,36,36,50,51,36,-29,-30,-3,36,-16,-32,36,-46,36,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,36,36,36,36,-27,16,36,36,36,36,36,36,36,36,36,36,36,36,36,-48,-47,36,36,106,36,36,-17,16,16,36,115,16,-15,36,-59,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-66,-60,-71,16,16,-61,-65,36,-69,-70,36,16,137,16,-68,-18,16,16,16,16,-67,16,16,]),'IF':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,21,22,23,25,27,28,30,32,33,34,35,36,37,38,39,40,41,52,53,70,71,79,81,83,86,87,89,90,91,92,93,94,95,96,97,98,99,100,101,102,105,107,110,112,113,120,121,123,124,127,130,132,133,134,135,136,138,139,140,141,],[17,17,-2,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-28,-29,-30,-3,-16,-32,-46,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-27,17,-48,-47,-17,17,17,17,-15,-59,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-66,-60,-71,17,17,-61,-65,-69,-70,17,17,-68,-18,17,17,17,17,-67,17,17,]),'WHILE':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,21,22,23,25,27,28,30,32,33,34,35,36,37,38,39,40,41,52,53,70,71,79,81,83,86,87,89,90,91,92,93,94,95,96,97,98,99,100,101,102,105,107,110,112,113,120,121,123,124,127,130,132,133,134,135,136,138,139,140,141,],[18,18,-2,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-28,-29,-30,-3,-16,-32,-46,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-27,18,-48,-47,-17,18,18,18,-15,-59,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-66,-60,-71,18,18,-61,-65,-69,-70,18,18,-68,-18,18,18,18,18,-67,18,18,]),'FOR':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,21,22,23,25,27,28,30,32,33,34,35,36,37,38,39,40,41,52,53,70,71,79,81,83,86,87,89,90,91,92,93,94,95,96,97,98,99,100,101,102,105,107,110,112,113,120,121,123,124,127,130,132,133,134,135,136,138,139,140,141,],[19,19,-2,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-28,-29,-30,-3,-16,-32,-46,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-27,19,-48,-47,-17,19,19,19,-15,-59,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-66,-60,-71,19,19,-61,-65,-69,-70,19,19,-68,-18,19,19,19,19,-67,19,19,]),'DEF':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,21,22,23,25,27,28,30,32,33,34,35,36,37,38,39,40,41,52,53,70,71,79,81,83,86,87,89,90,91,92,93,94,95,96,97,98,99,100,101,102,105,107,110,112,113,120,121,123,124,127,130,132,133,134,135,136,138,139,140,141,],[20,20,-2,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-28,-29,-30,-3,-16,-32,-46,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-27,20,-48,-47,-17,20,20,20,-15,-59,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-66,-60,-71,20,20,-61,-65,-69,-70,20,20,-68,-18,20,20,20,20,-67,20,20,]),'RETURN':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,21,22,23,25,27,28,30,32,33,34,35,36,37,38,39,40,41,52,53,70,71,79,81,83,86,87,89,90,91,92,93,94,95,96,97,98,99,100,101,102,105,107,110,112,113,120,121,123,124,127,130,132,133,134,135,136,138,139,140,141,],[21,21,-2,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-28,-29,-30,-3,-16,-32,-46,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-27,21,-48,-47,-17,21,21,21,-15,-59,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-66,-60,-71,21,21,-61,-65,-69,-70,21,21,-68,-18,21,21,21,21,-67,21,21,]),'BREAK':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,21,22,23,25,27,28,30,32,33,34,35,36,37,38,39,40,41,52,53,70,71,79,81,83,86,87,89,90,91,92,93,94,95,96,97,98,99,100,101,102,105,107,110,112,113,120,121,123,124,127,130,132,133,134,135,136,138,139,140,141,],[22,22,-2,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-28,-29,-30,-3,-16,-32,-46,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-27,22,-48,-47,-17,22,22,22,-15,-59,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-66,-60,-71,22,22,-61,-65,-69,-70,22,22,-68,-18,22,22,22,22,-67,22,22,]),'CONTINUE':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,21,22,23,25,27,28,30,32,33,34,35,36,37,38,39,40,41,52,53,70,71,79,81,83,86,87,89,90,91,92,93,94,95,96,97,98,99,100,101,102,105,107,110,112,113,120,121,123,124,127,130,132,133,134,135,136,138,139,140,141,],[23,23,-2,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-28,-29,-30,-3,-16,-32,-46,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-27,23,-48,-47,-17,23,23,23,-15,-59,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-66,-60,-71,23,23,-61,-65,-69,-70,23,23,-68,-18,23,23,23,23,-67,23,23,]),'TRY':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,21,22,23,25,27,28,30,32,33,34,35,36,37,38,39,40,41,52,53,70,71,79,81,83,86,87,89,90,91,92,93,94,95,96,97,98,99,100,101,102,105,107,110,112,113,120,121,123,124,127,130,132,133,134,135,136,138,139,140,141,],[24,24,-2,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-28,-29,-30,-3,-16,-32,-46,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-27,24,-48,-47,-17,24,24,24,-15,-59,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-66,-60,-71,24,24,-61,-65,-69,-70,24,24,-68,-18,24,24,24,24,-67,24,24,]),'$end':([1,2,3,4,5,6,7,8,9,10,11,12,13,14,21,22,23,25,27,28,30,32,33,34,35,36,37,38,39,40,41,52,70,71,79,87,89,90,91,92,93,94,95,96,97,98,99,100,101,102,105,107,110,112,113,120,121,123,124,132,133,135,138,139,140,141,],[0,-1,-2,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-28,-29,-30,-3,-16,-32,-46,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-27,-48,-47,-17,-15,-59,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-66,-60,-71,-19,-21,-61,-65,-69,-70,-68,-18,-22,-31,-67,-20,-23,]),'EXCEPT':([3,4,5,6,7,8,9,10,11,12,13,14,21,22,23,25,27,28,30,32,33,34,35,36,37,38,39,40,41,52,70,71,79,86,87,89,90,91,92,93,94,95,96,97,98,99,100,101,102,105,107,110,112,113,120,121,123,124,132,133,135,138,139,140,141,],[-2,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-28,-29,-30,-3,-16,-32,-46,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-27,-48,-47,-17,118,-15,-59,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-66,-60,-71,-19,-21,-61,-65,-69,-70,-68,-18,-22,-31,-67,-20,-23,]),'ELSE':([3,4,5,6,7,8,9,10,11,12,13,14,21,22,23,25,27,28,30,32,33,34,35,36,37,38,39,40,41,52,70,71,79,87,89,90,91,92,93,94,95,96,97,98,99,100,101,102,105,107,110,112,113,120,121,123,124,132,133,135,138,139,140,141,],[-2,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-28,-29,-30,-3,-16,-32,-46,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-27,-48,-47,-17,-15,-59,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-66,-60,-71,126,-21,-61,-65,-69,-70,-68,-18,-22,-31,-67,-20,-23,]),'LPAREN':([15,17,18,21,26,29,31,36,42,43,44,45,46,48,51,57,58,59,60,61,62,63,64,65,66,67,68,69,72,73,77,78,84,88,106,122,125,],[26,48,48,48,48,48,48,73,48,77,78,48,48,48,85,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,122,48,48,]),'NOT':([15,17,18,21,26,29,31,42,45,46,48,57,58,59,60,61,62,63,64,65,66,67,68,69,72,73,77,78,84,88,122,125,],[31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,]),'MINUS':([15,17,18,21,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,45,46,47,48,49,52,55,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,76,77,78,79,80,82,84,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,105,107,108,110,114,119,120,121,122,123,124,125,132,133,139,],[29,29,29,29,29,58,-32,29,-46,29,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,29,29,29,58,29,58,58,58,29,29,29,29,29,29,29,29,29,29,29,29,29,-48,-47,29,29,58,29,29,58,58,58,29,29,-59,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,58,-66,-60,58,-71,58,58,-61,-65,29,-69,-70,29,-68,58,-67,]),'NUMBER':([15,17,18,21,26,29,31,42,45,46,48,57,58,59,60,61,62,63,64,65,66,67,68,69,72,73,77,78,84,88,122,125,],[32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,]),'STRING':([15,17,18,21,26,29,31,42,45,46,48,57,58,59,60,61,62,63,64,65,66,67,68,69,72,73,77,78,84,88,122,125,],[33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,]),'TRUE':([15,17,18,21,26,29,31,42,45,46,48,57,58,59,60,61,62,63,64,65,66,67,68,69,72,73,77,78,84,88,122,125,],[34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,]),'FALSE':([15,17,18,21,26,29,31,42,45,46,48,57,58,59,60,61,62,63,64,65,66,67,68,69,72,73,77,78,84,88,122,125,],[35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,]),'LBRACKET':([15,16,17,18,21,26,29,31,36,42,45,46,48,57,58,59,60,61,62,63,64,65,66,67,68,69,72,73,77,78,84,88,122,125,],[42,46,42,42,42,42,42,42,72,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,]),'LEN':([15,17,18,21,26,29,31,42,45,46,48,57,58,59,60,61,62,63,64,65,66,67,68,69,72,73,77,78,84,88,122,125,],[43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,]),'RANGE':([15,17,18,21,26,29,31,42,45,46,48,57,58,59,60,61,62,63,64,65,66,67,68,69,72,73,77,78,84,88,122,125,],[44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,]),'EQUALS':([16,111,],[45,125,]),'COLON':([24,28,30,32,33,34,35,36,37,38,39,40,41,47,49,70,71,89,90,91,92,93,94,95,96,97,98,99,100,101,102,105,107,110,114,118,120,121,123,124,126,128,132,139,],[53,-32,-46,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,81,83,-48,-47,-59,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-66,-60,-71,127,130,-61,-65,-69,-70,134,136,-68,-67,]),'RPAREN':([26,28,30,32,33,34,35,36,37,38,39,40,41,54,55,56,70,71,73,76,78,82,85,89,90,91,92,93,94,95,96,97,98,99,100,101,102,104,105,107,108,109,110,115,116,117,119,120,121,122,123,124,131,132,137,139,],[-76,-32,-46,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,87,89,-64,-48,-47,105,-62,110,89,-76,-59,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,121,-66,-60,123,124,-71,-24,128,-26,-63,-61,-65,132,-69,-70,139,-68,-25,-67,]),'COMMA':([26,28,30,32,33,34,35,36,37,38,39,40,41,42,54,55,56,70,71,73,75,76,78,85,89,90,91,92,93,94,95,96,97,98,99,100,101,102,104,105,107,109,110,115,116,117,119,120,121,122,123,124,131,132,137,139,],[-76,-32,-46,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-76,88,-62,-64,-48,-47,-76,88,-62,-76,-76,-59,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,88,-66,-60,88,-71,-24,129,-26,-63,-61,-65,-76,-69,-70,88,-68,-25,-67,]),'PLUS':([27,28,30,32,33,34,35,36,37,38,39,40,41,47,49,52,55,70,71,76,79,80,82,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,105,107,108,110,114,119,120,121,123,124,132,133,139,],[57,-32,-46,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,57,57,57,57,-48,-47,57,57,57,57,-59,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,57,-66,-60,57,-71,57,57,-61,-65,-69,-70,-68,57,-67,]),'TIMES':([27,28,30,32,33,34,35,36,37,38,39,40,41,47,49,52,55,70,71,76,79,80,82,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,105,107,108,110,114,119,120,121,123,124,132,133,139,],[59,-32,-46,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,59,59,59,59,-48,-47,59,59,59,59,-59,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,59,-66,-60,59,-71,59,59,-61,-65,-69,-70,-68,59,-67,]),'DIVIDE':([27,28,30,32,33,34,35,36,37,38,39,40,41,47,49,52,55,70,71,76,79,80,82,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,105,107,108,110,114,119,120,121,123,124,132,133,139,],[60,-32,-46,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,60,60,60,60,-48,-47,60,60,60,60,-59,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,60,-66,-60,60,-71,60,60,-61,-65,-69,-70,-68,60,-67,]),'MODULO':([27,28,30,32,33,34,35,36,37,38,39,40,41,47,49,52,55,70,71,76,79,80,82,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,105,107,108,110,114,119,120,121,123,124,132,133,139,],[61,-32,-46,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,61,61,61,61,-48,-47,61,61,61,61,-59,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,61,-66,-60,61,-71,61,61,-61,-65,-69,-70,-68,61,-67,]),'GT':([27,28,30,32,33,34,35,36,37,38,39,40,41,47,49,52,55,70,71,76,79,80,82,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,105,107,108,110,114,119,120,121,123,124,132,133,139,],[62,-32,-46,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,62,62,62,62,-48,-47,62,62,62,62,-59,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,62,-66,-60,62,-71,62,62,-61,-65,-69,-70,-68,62,-67,]),'LT':([27,28,30,32,33,34,35,36,37,38,39,40,41,47,49,52,55,70,71,76,79,80,82,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,105,107,108,110,114,119,120,121,123,124,132,133,139,],[63,-32,-46,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,63,63,63,63,-48,-47,63,63,63,63,-59,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,63,-66,-60,63,-71,63,63,-61,-65,-69,-70,-68,63,-67,]),'GE':([27,28,30,32,33,34,35,36,37,38,39,40,41,47,49,52,55,70,71,76,79,80,82,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,105,107,108,110,114,119,120,121,123,124,132,133,139,],[64,-32,-46,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,64,64,64,64,-48,-47,64,64,64,64,-59,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,64,-66,-60,64,-71,64,64,-61,-65,-69,-70,-68,64,-67,]),'LE':([27,28,30,32,33,34,35,36,37,38,39,40,41,47,49,52,55,70,71,76,79,80,82,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,105,107,108,110,114,119,120,121,123,124,132,133,139,],[65,-32,-46,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,65,65,65,65,-48,-47,65,65,65,65,-59,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,65,-66,-60,65,-71,65,65,-61,-65,-69,-70,-68,65,-67,]),'EQ':([27,28,30,32,33,34,35,36,37,38,39,40,41,47,49,52,55,70,71,76,79,80,82,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,105,107,108,110,114,119,120,121,123,124,132,133,139,],[66,-32,-46,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,66,66,66,66,-48,-47,66,66,66,66,-59,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,66,-66,-60,66,-71,66,66,-61,-65,-69,-70,-68,66,-67,]),'NE':([27,28,30,32,33,34,35,36,37,38,39,40,41,47,49,52,55,70,71,76,79,80,82,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,105,107,108,110,114,119,120,121,123,124,132,133,139,],[67,-32,-46,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,67,67,67,67,-48,-47,67,67,67,67,-59,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,67,-66,-60,67,-71,67,67,-61,-65,-69,-70,-68,67,-67,]),'AND':([27,28,30,32,33,34,35,36,37,38,39,40,41,47,49,52,55,70,71,76,79,80,82,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,105,107,108,110,114,119,120,121,123,124,132,133,139,],[68,-32,-46,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,68,68,68,68,-48,-47,68,68,68,68,-59,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,68,-66,-60,68,-71,68,68,-61,-65,-69,-70,-68,68,-67,]),'OR':([27,28,30,32,33,34,35,36,37,38,39,40,41,47,49,52,55,70,71,76,79,80,82,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,105,107,108,110,114,119,120,121,123,124,132,133,139,],[69,-32,-46,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,69,69,69,69,-48,-47,69,69,69,69,-59,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,69,-66,-60,69,-71,69,69,-61,-65,-69,-70,-68,69,-67,]),'RBRACKET':([28,30,32,33,34,35,36,37,38,39,40,41,42,56,70,71,75,76,80,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,105,107,110,119,120,121,123,124,132,139,],[-32,-46,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-76,-64,-48,-47,107,-62,111,-59,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,120,-66,-60,-71,-63,-61,-65,-69,-70,-68,-67,]),'DOT':([36,],[74,]),'IN':([50,],[84,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'statements':([0,53,81,83,127,130,134,136,],[2,86,112,113,135,138,140,141,]),'statement':([0,2,53,81,83,86,112,113,127,130,134,135,136,138,140,141,],[3,25,3,3,3,25,25,25,3,3,3,25,3,25,25,25,]),'print_stmt':([0,2,53,81,83,86,112,113,127,130,134,135,136,138,140,141,],[4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,]),'assign_stmt':([0,2,53,81,83,86,112,113,127,130,134,135,136,138,140,141,],[5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,]),'if_stmt':([0,2,53,81,83,86,112,113,127,130,134,135,136,138,140,141,],[6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,]),'while_stmt':([0,2,53,81,83,86,112,113,127,130,134,135,136,138,140,141,],[7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,]),'for_stmt':([0,2,53,81,83,86,112,113,127,130,134,135,136,138,140,141,],[8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,]),'function_def':([0,2,53,81,83,86,112,113,127,130,134,135,136,138,140,141,],[9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,]),'return_stmt':([0,2,53,81,83,86,112,113,127,130,134,135,136,138,140,141,],[10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,]),'break_stmt':([0,2,53,81,83,86,112,113,127,130,134,135,136,138,140,141,],[11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,]),'continue_stmt':([0,2,53,81,83,86,112,113,127,130,134,135,136,138,140,141,],[12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,]),'try_except_stmt':([0,2,53,81,83,86,112,113,127,130,134,135,136,138,140,141,],[13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,]),'expr':([15,17,18,21,26,42,45,46,48,72,73,77,78,84,88,122,125,],[27,47,49,52,55,76,79,80,82,103,76,108,76,114,119,76,133,]),'term':([15,17,18,21,26,29,31,42,45,46,48,57,58,59,60,61,62,63,64,65,66,67,68,69,72,73,77,78,84,88,122,125,],[28,28,28,28,28,70,71,28,28,28,28,90,91,92,93,94,95,96,97,98,99,100,101,102,28,28,28,28,28,28,28,28,]),'factor':([15,17,18,21,26,29,31,42,45,46,48,57,58,59,60,61,62,63,64,65,66,67,68,69,72,73,77,78,84,88,122,125,],[30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,]),'list_expr':([15,17,18,21,26,29,31,42,45,46,48,57,58,59,60,61,62,63,64,65,66,67,68,69,72,73,77,78,84,88,122,125,],[37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,]),'function_call':([15,17,18,21,26,29,31,42,45,46,48,57,58,59,60,61,62,63,64,65,66,67,68,69,72,73,77,78,84,88,122,125,],[38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,]),'string_method':([15,17,18,21,26,29,31,42,45,46,48,57,58,59,60,61,62,63,64,65,66,67,68,69,72,73,77,78,84,88,122,125,],[39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,]),'len_function':([15,17,18,21,26,29,31,42,45,46,48,57,58,59,60,61,62,63,64,65,66,67,68,69,72,73,77,78,84,88,122,125,],[40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,]),'range_call':([15,17,18,21,26,29,31,42,45,46,48,57,58,59,60,61,62,63,64,65,66,67,68,69,72,73,77,78,84,88,122,125,],[41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,]),'expr_list':([26,42,73,78,122,],[54,75,104,109,131,]),'empty':([26,42,73,78,85,122,],[56,56,56,56,117,56,]),'param_list':([85,],[116,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> statements','program',1,'p_program','myparser.py',20),
  ('statements -> statement','statements',1,'p_statements','myparser.py',24),
  ('statements -> statements statement','statements',2,'p_statements','myparser.py',25),
  ('statement -> print_stmt','statement',1,'p_statement','myparser.py',32),
  ('statement -> assign_stmt','statement',1,'p_statement','myparser.py',33),
  ('statement -> if_stmt','statement',1,'p_statement','myparser.py',34),
  ('statement -> while_stmt','statement',1,'p_statement','myparser.py',35),
  ('statement -> for_stmt','statement',1,'p_statement','myparser.py',36),
  ('statement -> function_def','statement',1,'p_statement','myparser.py',37),
  ('statement -> return_stmt','statement',1,'p_statement','myparser.py',38),
  ('statement -> break_stmt','statement',1,'p_statement','myparser.py',39),
  ('statement -> continue_stmt','statement',1,'p_statement','myparser.py',40),
  ('statement -> try_except_stmt','statement',1,'p_statement','myparser.py',41),
  ('statement -> NEWLINE','statement',1,'p_statement','myparser.py',42),
  ('print_stmt -> PRINT LPAREN expr_list RPAREN','print_stmt',4,'p_print_stmt','myparser.py',46),
  ('print_stmt -> PRINT expr','print_stmt',2,'p_print_stmt','myparser.py',47),
  ('assign_stmt -> IDENTIFIER EQUALS expr','assign_stmt',3,'p_assign_stmt','myparser.py',59),
  ('assign_stmt -> IDENTIFIER LBRACKET expr RBRACKET EQUALS expr','assign_stmt',6,'p_assign_stmt','myparser.py',60),
  ('if_stmt -> IF expr COLON statements','if_stmt',4,'p_if_stmt','myparser.py',67),
  ('if_stmt -> IF expr COLON statements ELSE COLON statements','if_stmt',7,'p_if_stmt','myparser.py',68),
  ('while_stmt -> WHILE expr COLON statements','while_stmt',4,'p_while_stmt','myparser.py',75),
  ('for_stmt -> FOR IDENTIFIER IN expr COLON statements','for_stmt',6,'p_for_stmt','myparser.py',79),
  ('function_def -> DEF IDENTIFIER LPAREN param_list RPAREN COLON statements','function_def',7,'p_function_def','myparser.py',83),
  ('param_list -> IDENTIFIER','param_list',1,'p_param_list','myparser.py',87),
  ('param_list -> param_list COMMA IDENTIFIER','param_list',3,'p_param_list','myparser.py',88),
  ('param_list -> empty','param_list',1,'p_param_list','myparser.py',89),
  ('return_stmt -> RETURN expr','return_stmt',2,'p_return_stmt','myparser.py',96),
  ('return_stmt -> RETURN','return_stmt',1,'p_return_stmt','myparser.py',97),
  ('break_stmt -> BREAK','break_stmt',1,'p_break_stmt','myparser.py',104),
  ('continue_stmt -> CONTINUE','continue_stmt',1,'p_continue_stmt','myparser.py',108),
  ('try_except_stmt -> TRY COLON statements EXCEPT COLON statements','try_except_stmt',6,'p_try_except_stmt','myparser.py',112),
  ('expr -> term','expr',1,'p_expr','myparser.py',116),
  ('expr -> expr PLUS term','expr',3,'p_expr','myparser.py',117),
  ('expr -> expr MINUS term','expr',3,'p_expr','myparser.py',118),
  ('expr -> expr TIMES term','expr',3,'p_expr','myparser.py',119),
  ('expr -> expr DIVIDE term','expr',3,'p_expr','myparser.py',120),
  ('expr -> expr MODULO term','expr',3,'p_expr','myparser.py',121),
  ('expr -> expr GT term','expr',3,'p_expr','myparser.py',122),
  ('expr -> expr LT term','expr',3,'p_expr','myparser.py',123),
  ('expr -> expr GE term','expr',3,'p_expr','myparser.py',124),
  ('expr -> expr LE term','expr',3,'p_expr','myparser.py',125),
  ('expr -> expr EQ term','expr',3,'p_expr','myparser.py',126),
  ('expr -> expr NE term','expr',3,'p_expr','myparser.py',127),
  ('expr -> expr AND term','expr',3,'p_expr','myparser.py',128),
  ('expr -> expr OR term','expr',3,'p_expr','myparser.py',129),
  ('term -> factor','term',1,'p_term','myparser.py',136),
  ('term -> NOT term','term',2,'p_term','myparser.py',137),
  ('term -> MINUS term','term',2,'p_term','myparser.py',138),
  ('factor -> NUMBER','factor',1,'p_factor','myparser.py',145),
  ('factor -> STRING','factor',1,'p_factor','myparser.py',146),
  ('factor -> TRUE','factor',1,'p_factor','myparser.py',147),
  ('factor -> FALSE','factor',1,'p_factor','myparser.py',148),
  ('factor -> IDENTIFIER','factor',1,'p_factor','myparser.py',149),
  ('factor -> list_expr','factor',1,'p_factor','myparser.py',150),
  ('factor -> function_call','factor',1,'p_factor','myparser.py',151),
  ('factor -> string_method','factor',1,'p_factor','myparser.py',152),
  ('factor -> len_function','factor',1,'p_factor','myparser.py',153),
  ('factor -> range_call','factor',1,'p_factor','myparser.py',154),
  ('factor -> LPAREN expr RPAREN','factor',3,'p_factor','myparser.py',155),
  ('list_expr -> LBRACKET expr_list RBRACKET','list_expr',3,'p_list_expr','myparser.py',162),
  ('list_expr -> IDENTIFIER LBRACKET expr RBRACKET','list_expr',4,'p_list_expr','myparser.py',163),
  ('expr_list -> expr','expr_list',1,'p_expr_list','myparser.py',170),
  ('expr_list -> expr_list COMMA expr','expr_list',3,'p_expr_list','myparser.py',171),
  ('expr_list -> empty','expr_list',1,'p_expr_list','myparser.py',172),
  ('function_call -> IDENTIFIER LPAREN expr_list RPAREN','function_call',4,'p_function_call','myparser.py',179),
  ('function_call -> IDENTIFIER LPAREN RPAREN','function_call',3,'p_function_call','myparser.py',180),
  ('string_method -> IDENTIFIER DOT IDENTIFIER LPAREN expr_list RPAREN','string_method',6,'p_string_method','myparser.py',187),
  ('string_method -> IDENTIFIER DOT IDENTIFIER LPAREN RPAREN','string_method',5,'p_string_method','myparser.py',188),
  ('len_function -> LEN LPAREN expr RPAREN','len_function',4,'p_len_function','myparser.py',195),
  ('range_call -> RANGE LPAREN expr_list RPAREN','range_call',4,'p_range_call','myparser.py',199),
  ('range_call -> RANGE LPAREN RPAREN','range_call',3,'p_range_call','myparser.py',200),
  ('expression -> IDENTIFIER LPAREN arg_list RPAREN','expression',4,'p_expression_funccall','myparser.py',210),
  ('arg_list -> expression','arg_list',1,'p_arg_list','myparser.py',214),
  ('arg_list -> arg_list COMMA expression','arg_list',3,'p_arg_list','myparser.py',215),
  ('arg_list -> empty','arg_list',1,'p_arg_list','myparser.py',216),
  ('empty -> <empty>','empty',0,'p_empty','myparser.py',223),
]
